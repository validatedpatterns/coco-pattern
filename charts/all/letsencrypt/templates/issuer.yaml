{{ if .Values.letsencrypt.enabled }}
{{ if and (eq .Values.global.clusterPlatform "AWS") .Values.letsencrypt.cloudProviderDNS }}
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: validated-patterns-issuer
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  acme:
    server: {{ .Values.letsencrypt.server }}
    email: {{ .Values.letsencrypt.email }}
    # Only use for persistent domains :)
    privateKeySecretRef:
      name: validated-patterns-issuer-account-key
    solvers:
    - selector: {}
      dns01:
        route53:
          region: {{ .Values.letsencrypt.region }}
          accessKeyIDSecretRef:
            name: cert-manager-dns-credentials
            key: aws_access_key_id
          secretAccessKeySecretRef:
            name: cert-manager-dns-credentials
            key: aws_secret_access_key

{{- end }}
{{ if and (eq .Values.global.clusterPlatform "Azure") .Values.letsencrypt.cloudProviderDNS }}
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: validated-patterns-issuer
spec:
  acme:
    server: {{ .Values.letsencrypt.server }}
    email: {{ .Values.letsencrypt.email }}
    solvers:
    - dns01:
        azureDNS:
          clientID: {{ .Values.global.azure.clientID }}
          clientSecretSecretRef:
          # The following is the secret we created in Kubernetes. Issuer will use this to present challenge to Azure DNS.
            name: azuredns-config
            key: client-secret
          subscriptionID: {{ .Values.global.azure.subscriptionID }}
          tenantID: {{ .Values.global.azure.tenantID }}
          resourceGroupName: {{ .Values.global.azure.DNSResGroup }}
          hostedZoneName: {{ .Values.global.azure.hostedZoneName }}
          # Azure Cloud Environment, default to AzurePublicCloud
          environment: AzurePublicCloud

{{- end }}
{{- end }}
